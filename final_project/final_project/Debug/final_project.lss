
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e88  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000955  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cf  00000000  00000000  00001d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fc  00000000  00000000  00002c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003166  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	35 d1       	rcall	.+618    	; 0x32e <main>
  c4:	4d c1       	rjmp	.+666    	; 0x360 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
		PORTC |= ((data >> i ) & 0x01 );
		PORTC |= 0x04;
	}
	PORTC |= 0x02;
	
	PORTC = 0x00;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <TimerOn>:
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 136:	8d e7       	ldi	r24, 0x7D	; 125
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 148:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 14c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 158:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 15c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 168:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 16c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 170:	8f b7       	in	r24, 0x3f	; 63
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8f bf       	out	0x3f, r24	; 63
 176:	08 95       	ret

00000178 <__vector_13>:
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 18e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 192:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 196:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b1 09       	sbc	r27, r1
 1a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1a8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1ac:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	99 f4       	brne	.+38     	; 0x1de <__vector_13+0x66>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1da:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <TimerSet>:
 1f0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1f4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 200:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 204:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 20c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 210:	08 95       	ret

00000212 <adc_init>:
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 218:	87 e8       	ldi	r24, 0x87	; 135
 21a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 21e:	08 95       	ret

00000220 <adc_read>:
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	90 81       	ld	r25, Z
 226:	98 7f       	andi	r25, 0xF8	; 248
 228:	87 70       	andi	r24, 0x07	; 7
 22a:	89 2b       	or	r24, r25
 22c:	80 83       	st	Z, r24
 22e:	ea e7       	ldi	r30, 0x7A	; 122
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
 238:	80 81       	ld	r24, Z
 23a:	86 fd       	sbrc	r24, 6
 23c:	fd cf       	rjmp	.-6      	; 0x238 <adc_read+0x18>
 23e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 242:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 246:	08 95       	ret

00000248 <s_tick>:
}

enum Stick_States {S_Start, S_Run} S_state;

void s_tick()
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
		uint16_t x, y;
		y = adc_read(2);
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	e8 df       	rcall	.-48     	; 0x220 <adc_read>
 250:	ec 01       	movw	r28, r24
		x = adc_read(3);
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	e5 df       	rcall	.-54     	; 0x220 <adc_read>
 256:	9c 01       	movw	r18, r24
		
		switch(S_state)
 258:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <S_state>
 25c:	99 23       	and	r25, r25
 25e:	19 f0       	breq	.+6      	; 0x266 <s_tick+0x1e>
 260:	91 30       	cpi	r25, 0x01	; 1
 262:	41 f0       	breq	.+16     	; 0x274 <s_tick+0x2c>
 264:	04 c0       	rjmp	.+8      	; 0x26e <s_tick+0x26>
		{
			case S_Start:
				S_state = S_Run;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <S_state>
				break;
 26c:	03 c0       	rjmp	.+6      	; 0x274 <s_tick+0x2c>
				break;
			default:
				break;
		}
		
		switch(S_state)
 26e:	91 30       	cpi	r25, 0x01	; 1
 270:	09 f0       	breq	.+2      	; 0x274 <s_tick+0x2c>
 272:	52 c0       	rjmp	.+164    	; 0x318 <s_tick+0xd0>
		{
			case S_Start:
				break;
			case S_Run:
				if (~PINA & 0x10)
 274:	04 99       	sbic	0x00, 4	; 0
 276:	06 c0       	rjmp	.+12     	; 0x284 <s_tick+0x3c>
				{
					sendInput = sendInput | 0x10;
 278:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 27c:	80 61       	ori	r24, 0x10	; 16
 27e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
 282:	05 c0       	rjmp	.+10     	; 0x28e <s_tick+0x46>
				}
				else
				{
					sendInput = sendInput & 0xEF;
 284:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 288:	8f 7e       	andi	r24, 0xEF	; 239
 28a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
				}
				if ((y > 1000) && ((x > 100) && (x < 900))) // up
 28e:	c9 3e       	cpi	r28, 0xE9	; 233
 290:	43 e0       	ldi	r20, 0x03	; 3
 292:	d4 07       	cpc	r29, r20
 294:	68 f0       	brcs	.+26     	; 0x2b0 <s_tick+0x68>
 296:	c9 01       	movw	r24, r18
 298:	85 56       	subi	r24, 0x65	; 101
 29a:	91 09       	sbc	r25, r1
 29c:	8f 31       	cpi	r24, 0x1F	; 31
 29e:	93 40       	sbci	r25, 0x03	; 3
 2a0:	b8 f4       	brcc	.+46     	; 0x2d0 <s_tick+0x88>
				{
					sendInput = sendInput & 0xF0;
					sendInput = sendInput | 0x08;
 2a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
 2ae:	34 c0       	rjmp	.+104    	; 0x318 <s_tick+0xd0>
				}
				else if ((y < 50) && ((x > 100) && (x < 900))) // down
 2b0:	c2 33       	cpi	r28, 0x32	; 50
 2b2:	d1 05       	cpc	r29, r1
 2b4:	68 f4       	brcc	.+26     	; 0x2d0 <s_tick+0x88>
 2b6:	c9 01       	movw	r24, r18
 2b8:	85 56       	subi	r24, 0x65	; 101
 2ba:	91 09       	sbc	r25, r1
 2bc:	8f 31       	cpi	r24, 0x1F	; 31
 2be:	93 40       	sbci	r25, 0x03	; 3
 2c0:	38 f4       	brcc	.+14     	; 0x2d0 <s_tick+0x88>
				{
					sendInput = sendInput & 0xF0;
					sendInput = sendInput | 0x04;
 2c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 2c6:	80 7f       	andi	r24, 0xF0	; 240
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
 2ce:	24 c0       	rjmp	.+72     	; 0x318 <s_tick+0xd0>
				}
				else if ((x > 1000) && ((y > 100) && (y < 900))) // right
 2d0:	29 3e       	cpi	r18, 0xE9	; 233
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	38 07       	cpc	r19, r24
 2d6:	60 f0       	brcs	.+24     	; 0x2f0 <s_tick+0xa8>
 2d8:	c5 56       	subi	r28, 0x65	; 101
 2da:	d1 09       	sbc	r29, r1
 2dc:	cf 31       	cpi	r28, 0x1F	; 31
 2de:	d3 40       	sbci	r29, 0x03	; 3
 2e0:	b0 f4       	brcc	.+44     	; 0x30e <s_tick+0xc6>
				{
					sendInput = sendInput & 0xF0;
					sendInput = sendInput | 0x02;
 2e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 2e6:	80 7f       	andi	r24, 0xF0	; 240
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
 2ee:	14 c0       	rjmp	.+40     	; 0x318 <s_tick+0xd0>
				}
				else if ((x < 50) && ((y > 100) && (y < 900))) // left
 2f0:	22 33       	cpi	r18, 0x32	; 50
 2f2:	31 05       	cpc	r19, r1
 2f4:	60 f4       	brcc	.+24     	; 0x30e <s_tick+0xc6>
 2f6:	c5 56       	subi	r28, 0x65	; 101
 2f8:	d1 09       	sbc	r29, r1
 2fa:	cf 31       	cpi	r28, 0x1F	; 31
 2fc:	d3 40       	sbci	r29, 0x03	; 3
 2fe:	38 f4       	brcc	.+14     	; 0x30e <s_tick+0xc6>
				{
					sendInput = sendInput & 0xF0;
					sendInput = sendInput | 0x01;
 300:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	81 60       	ori	r24, 0x01	; 1
 308:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
 30c:	05 c0       	rjmp	.+10     	; 0x318 <s_tick+0xd0>
				}
				else
				{
					sendInput = sendInput & 0xF0;
 30e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 312:	80 7f       	andi	r24, 0xF0	; 240
 314:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sendInput>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 318:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				}
				break;
			default:
				break;
		}
		if (USART_IsSendReady(0))
 31c:	85 ff       	sbrs	r24, 5
 31e:	04 c0       	rjmp	.+8      	; 0x328 <s_tick+0xe0>
		{
			USART_Send(sendInput, 0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sendInput>
 326:	f2 de       	rcall	.-540    	; 0x10c <USART_Send>
		}
		
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <main>:


int main(void)
{
    /* Replace with your application code*/
	DDRA = 0x03; PORTA = 0xFC;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	81 b9       	out	0x01, r24	; 1
 332:	8c ef       	ldi	r24, 0xFC	; 252
 334:	82 b9       	out	0x02, r24	; 2
	sendInput = 0x00;
 336:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sendInput>
	TimerSet(100);
 33a:	64 e6       	ldi	r22, 0x64	; 100
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	56 df       	rcall	.-340    	; 0x1f0 <TimerSet>
	TimerOn();
 344:	f5 de       	rcall	.-534    	; 0x130 <TimerOn>
	adc_init();
 346:	65 df       	rcall	.-310    	; 0x212 <adc_init>
	initUSART(0);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	be de       	rcall	.-644    	; 0xc8 <initUSART>
	S_state = S_Start;
 34c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <S_state>
	
    while (1) 
    {
		s_tick();
 350:	7b df       	rcall	.-266    	; 0x248 <s_tick>
 352:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		while(!TimerFlag){}
 356:	88 23       	and	r24, r24
 358:	e1 f3       	breq	.-8      	; 0x352 <main+0x24>
 35a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 35e:	f8 cf       	rjmp	.-16     	; 0x350 <main+0x22>

00000360 <_exit>:
    }
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
