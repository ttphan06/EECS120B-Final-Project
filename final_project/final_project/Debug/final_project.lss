
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf9  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  000011cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061a  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c1  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	98 c0       	rjmp	.+304    	; 0x166 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d6 d0       	rcall	.+428    	; 0x270 <main>
  c4:	2d c1       	rjmp	.+602    	; 0x320 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <TimerOn>:
 11e:	8b e0       	ldi	r24, 0x0B	; 11
 120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 124:	8d e7       	ldi	r24, 0x7D	; 125
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 136:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 13a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 146:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 14a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 14e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 152:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 156:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 15a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 15e:	8f b7       	in	r24, 0x3f	; 63
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8f bf       	out	0x3f, r24	; 63
 164:	08 95       	ret

00000166 <__vector_13>:
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 180:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 184:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	a1 09       	sbc	r26, r1
 18c:	b1 09       	sbc	r27, r1
 18e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 192:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 196:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 19a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 19e:	89 2b       	or	r24, r25
 1a0:	8a 2b       	or	r24, r26
 1a2:	8b 2b       	or	r24, r27
 1a4:	99 f4       	brne	.+38     	; 0x1cc <__vector_13+0x66>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1c4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1c8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <TimerSet>:
 1de:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1e2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1ee:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 1f2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 1f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 1fa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 1fe:	08 95       	ret

00000200 <adc_init>:
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 206:	87 e8       	ldi	r24, 0x87	; 135
 208:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 20c:	08 95       	ret

0000020e <adc_read>:
 20e:	ec e7       	ldi	r30, 0x7C	; 124
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	98 7f       	andi	r25, 0xF8	; 248
 216:	87 70       	andi	r24, 0x07	; 7
 218:	89 2b       	or	r24, r25
 21a:	80 83       	st	Z, r24
 21c:	ea e7       	ldi	r30, 0x7A	; 122
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	86 fd       	sbrc	r24, 6
 22a:	fd cf       	rjmp	.-6      	; 0x226 <adc_read+0x18>
 22c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 230:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 234:	08 95       	ret

00000236 <transmit_data>:


void transmit_data(unsigned char data)
{
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
	// SRCLK : C2
	// SRCLR : C3
	char i;
	for (i = 0; i < 8; ++i)
	{
		PORTC = 0x08;
 23a:	98 e0       	ldi	r25, 0x08	; 8
		PORTC = 0x08;
		PORTC = 0x08 | (data & (0x01 << i));
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
	// SRCLK : C2
	// SRCLR : C3
	char i;
	for (i = 0; i < 8; ++i)
	{
		PORTC = 0x08;
 240:	98 b9       	out	0x08, r25	; 8
		PORTC = 0x08;
 242:	98 b9       	out	0x08, r25	; 8
		PORTC = 0x08 | (data & (0x01 << i));
 244:	9b 01       	movw	r18, r22
 246:	04 2e       	mov	r0, r20
 248:	02 c0       	rjmp	.+4      	; 0x24e <transmit_data+0x18>
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <transmit_data+0x14>
 252:	28 23       	and	r18, r24
 254:	32 2f       	mov	r19, r18
 256:	38 60       	ori	r19, 0x08	; 8
 258:	38 b9       	out	0x08, r19	; 8
		PORTC = 0x04 | 0x08 | (data & (0x01 << i));
 25a:	2c 60       	ori	r18, 0x0C	; 12
 25c:	28 b9       	out	0x08, r18	; 8
 25e:	4f 5f       	subi	r20, 0xFF	; 255
 260:	5f 4f       	sbci	r21, 0xFF	; 255
	//SER : C0
	// RCLK : C1
	// SRCLK : C2
	// SRCLR : C3
	char i;
	for (i = 0; i < 8; ++i)
 262:	48 30       	cpi	r20, 0x08	; 8
 264:	51 05       	cpc	r21, r1
 266:	61 f7       	brne	.-40     	; 0x240 <transmit_data+0xa>
		PORTC = 0x08;
		PORTC = 0x08;
		PORTC = 0x08 | (data & (0x01 << i));
		PORTC = 0x04 | 0x08 | (data & (0x01 << i));
	}
	PORTC = 0x02;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	88 b9       	out	0x08, r24	; 8
	PORTC = 0x00;
 26c:	18 b8       	out	0x08, r1	; 8
 26e:	08 95       	ret

00000270 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF; PORTB = 0x00;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	84 b9       	out	0x04, r24	; 4
 274:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x03; PORTA = 0xFC;
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	91 b9       	out	0x01, r25	; 1
 27a:	9c ef       	ldi	r25, 0xFC	; 252
 27c:	92 b9       	out	0x02, r25	; 2
	DDRD = 0xFF; PORTD = 0x00;
 27e:	8a b9       	out	0x0a, r24	; 10
 280:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 282:	87 b9       	out	0x07, r24	; 7
 284:	18 b8       	out	0x08, r1	; 8
	adc_init();
 286:	bc df       	rcall	.-136    	; 0x200 <adc_init>
	uint16_t x, y;
	LCD_init();
 288:	3b df       	rcall	.-394    	; 0x100 <LCD_init>
 28a:	68 ee       	ldi	r22, 0xE8	; 232
	TimerSet(1000);
 28c:	73 e0       	ldi	r23, 0x03	; 3
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	a5 df       	rcall	.-182    	; 0x1de <TimerSet>
	TimerOn();
 294:	44 df       	rcall	.-376    	; 0x11e <TimerOn>
 296:	68 94       	set
		{
			PORTB = 0x04;
		}
		else if ((x < 50) && ((y > 100) && (y < 900))) // left
		{
			PORTB = 0x08;
 298:	dd 24       	eor	r13, r13
 29a:	d3 f8       	bld	r13, 3
 29c:	68 94       	set
		{
			PORTB = 0x02;
		}		
		else if ((x > 1000) && ((y > 100) && (y < 900))) // right
		{
			PORTB = 0x04;
 29e:	ee 24       	eor	r14, r14
 2a0:	e2 f8       	bld	r14, 2
		y = adc_read(2);
		x = adc_read(3);
		transmit_data(0x0F);
		if ((y > 1000) && ((x > 100) && (x < 900))) // up
		{
			PORTB = 0x01;
 2a2:	ff 24       	eor	r15, r15
 2a4:	f3 94       	inc	r15
	TimerOn();
	char a[10];
 
    while (1) 
    {
		y = adc_read(2);
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	b2 df       	rcall	.-156    	; 0x20e <adc_read>
 2aa:	ec 01       	movw	r28, r24
		x = adc_read(3);
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	af df       	rcall	.-162    	; 0x20e <adc_read>
 2b0:	8c 01       	movw	r16, r24
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
		transmit_data(0x0F);
 2b4:	c0 df       	rcall	.-128    	; 0x236 <transmit_data>
 2b6:	c9 3e       	cpi	r28, 0xE9	; 233
 2b8:	23 e0       	ldi	r18, 0x03	; 3
		if ((y > 1000) && ((x > 100) && (x < 900))) // up
 2ba:	d2 07       	cpc	r29, r18
 2bc:	40 f0       	brcs	.+16     	; 0x2ce <main+0x5e>
 2be:	c8 01       	movw	r24, r16
 2c0:	85 56       	subi	r24, 0x65	; 101
 2c2:	91 09       	sbc	r25, r1
 2c4:	8f 31       	cpi	r24, 0x1F	; 31
 2c6:	93 40       	sbci	r25, 0x03	; 3
 2c8:	70 f4       	brcc	.+28     	; 0x2e6 <main+0x76>
 2ca:	f5 b8       	out	0x05, r15	; 5
 2cc:	22 c0       	rjmp	.+68     	; 0x312 <main+0xa2>
		{
			PORTB = 0x01;
 2ce:	c2 33       	cpi	r28, 0x32	; 50
 2d0:	d1 05       	cpc	r29, r1
		}
		else if ((y < 50) && ((x > 100) && (x < 900))) // down
 2d2:	48 f4       	brcc	.+18     	; 0x2e6 <main+0x76>
 2d4:	c8 01       	movw	r24, r16
 2d6:	85 56       	subi	r24, 0x65	; 101
 2d8:	91 09       	sbc	r25, r1
 2da:	8f 31       	cpi	r24, 0x1F	; 31
 2dc:	93 40       	sbci	r25, 0x03	; 3
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <main+0x76>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	85 b9       	out	0x05, r24	; 5
		{
			PORTB = 0x02;
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <main+0xa2>
 2e6:	09 3e       	cpi	r16, 0xE9	; 233
 2e8:	83 e0       	ldi	r24, 0x03	; 3
		}		
		else if ((x > 1000) && ((y > 100) && (y < 900))) // right
 2ea:	18 07       	cpc	r17, r24
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <main+0x8c>
 2ee:	c5 56       	subi	r28, 0x65	; 101
 2f0:	d1 09       	sbc	r29, r1
 2f2:	cf 31       	cpi	r28, 0x1F	; 31
 2f4:	d3 40       	sbci	r29, 0x03	; 3
 2f6:	60 f4       	brcc	.+24     	; 0x310 <main+0xa0>
 2f8:	e5 b8       	out	0x05, r14	; 5
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <main+0xa2>
		{
			PORTB = 0x04;
 2fc:	02 33       	cpi	r16, 0x32	; 50
 2fe:	11 05       	cpc	r17, r1
		}
		else if ((x < 50) && ((y > 100) && (y < 900))) // left
 300:	38 f4       	brcc	.+14     	; 0x310 <main+0xa0>
 302:	c5 56       	subi	r28, 0x65	; 101
 304:	d1 09       	sbc	r29, r1
 306:	cf 31       	cpi	r28, 0x1F	; 31
 308:	d3 40       	sbci	r29, 0x03	; 3
 30a:	10 f4       	brcc	.+4      	; 0x310 <main+0xa0>
 30c:	d5 b8       	out	0x05, r13	; 5
 30e:	01 c0       	rjmp	.+2      	; 0x312 <main+0xa2>
		{
			PORTB = 0x08;
 310:	15 b8       	out	0x05, r1	; 5
 312:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		{
			PORTB = 0x00;
		}
		//itoa(x, a, 10);
		//LCD_DisplayString(1, a);
		while(!TimerFlag){}
 316:	88 23       	and	r24, r24
 318:	e1 f3       	breq	.-8      	; 0x312 <main+0xa2>
 31a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 31e:	c3 cf       	rjmp	.-122    	; 0x2a6 <main+0x36>

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
    }
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
